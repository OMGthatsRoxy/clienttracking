"use client";

import { useAuth } from "@/features/auth/AuthProvider";
import { useLanguage } from "@/features/language/LanguageProvider";
import { useState, useEffect } from "react";
import { collection, query, where, getDocs, doc, getDoc, setDoc, updateDoc, onSnapshot } from "firebase/firestore";
import { db } from "@/lib/firebase";
import type { Client } from "@/types/client";
import type { Package } from "@/types/package";
import type { ScheduleItem } from "@/types/schedule";
import type { Coach } from "@/types/coach";
import ImageUpload from "@/features/upload/ImageUpload";
import Link from "next/link";

// 获取今日日期（使用本地时区）
const getTodayDate = () => {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
};

export default function ProfilePage() {
  const { user } = useAuth();
  const { t, language } = useLanguage();
  const [clients, setClients] = useState<Client[]>([]);
  const [packages, setPackages] = useState<Package[]>([]);
  const [schedules, setSchedules] = useState<ScheduleItem[]>([]);
  const [coach, setCoach] = useState<Coach | null>(null);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState({
    displayName: '',
    phone: '',
    bio: '',
    specialties: [] as string[],
    experience: 0,
    certifications: [] as string[],
    education: '',
    location: '',
    languages: [] as string[],
    isPublic: false,
    avatar: ''
  });
  const [customSpecialty, setCustomSpecialty] = useState('');
  const [showCustomInput, setShowCustomInput] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    // 检测是否为移动设备
    const checkMobile = () => {
      const userAgent = navigator.userAgent.toLowerCase();
      const isMobileDevice = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
      setIsMobile(isMobileDevice);
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);

    return () => {
      window.removeEventListener('resize', checkMobile);
    };
  }, []);

  useEffect(() => {
    if (!user) return;
    
    const fetchCoachData = async () => {
      setLoading(true);
      try {
        // 获取教练信息
        const coachDoc = await getDoc(doc(db, "coaches", user.uid));
        if (coachDoc.exists()) {
          const coachData = { id: coachDoc.id, ...coachDoc.data() } as Coach;
          setCoach(coachData);
          setEditForm({
            displayName: coachData.displayName || '',
            phone: coachData.phone || '',
            bio: coachData.bio || '',
            specialties: coachData.specialties || [],
            experience: coachData.experience || 0,
            certifications: coachData.certifications || [],
            education: coachData.education || '',
            location: coachData.location || '',
            languages: coachData.languages || [],
            isPublic: coachData.isPublic || false,
            avatar: coachData.avatar || ''
          });
        } else {
          // 创建默认教练信息
          const defaultCoach: Coach = {
            id: user.uid,
            email: user.email || '',
            displayName: user.email?.split('@')[0] || '教练',
            phone: '',
            bio: '',
            specialties: [],
            experience: 0,
            certifications: [],
            education: '',
            location: '',
            languages: ['zh'],
            isPublic: false,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          };
          await setDoc(doc(db, "coaches", user.uid), defaultCoach);
          setCoach(defaultCoach);
          setEditForm({
            displayName: defaultCoach.displayName,
            phone: defaultCoach.phone || '',
            bio: defaultCoach.bio || '',
            specialties: defaultCoach.specialties,
            experience: defaultCoach.experience,
            certifications: defaultCoach.certifications,
            education: defaultCoach.education || '',
            location: defaultCoach.location || '',
            languages: defaultCoach.languages,
            isPublic: defaultCoach.isPublic,
            avatar: defaultCoach.avatar || ''
          });
        }
      } catch (error) {
        console.error("获取教练信息失败:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCoachData();

    // 实时监听客户数据
    const clientsQuery = query(collection(db, "clients"), where("coachId", "==", user.uid));
    const clientsUnsubscribe = onSnapshot(clientsQuery, (snapshot) => {
      const clientsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Client));
      setClients(clientsData);
    });

    // 实时监听配套数据 - 只获取当前教练的配套
    const packagesQuery = query(collection(db, "packages"), where("coachId", "==", user.uid));
    const packagesUnsubscribe = onSnapshot(packagesQuery, (snapshot) => {
      const packagesData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Package));
      console.log('实时更新配套数据:', packagesData.length, '个配套');
      console.log('当前教练配套详情:', packagesData);
      
      setPackages(packagesData);
    });

    // 实时监听日程表数据
    const schedulesQuery = query(collection(db, "schedules"), where("coachId", "==", user.uid));
    const schedulesUnsubscribe = onSnapshot(schedulesQuery, (snapshot) => {
      const schedulesData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as ScheduleItem));
      console.log('实时更新日程表数据:', schedulesData.length, '条记录');
      console.log('今日课程详情:', schedulesData.filter(s => s.date === getTodayDate()));
      setSchedules(schedulesData);
    });

    // 清理监听器
    return () => {
      clientsUnsubscribe();
      packagesUnsubscribe();
      schedulesUnsubscribe();
    };
  }, [user]);



  if (!user) {
    return (
      <main style={{
        minHeight: "100vh",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        background: "#18181b"
      }}>
        <div style={{ color: '#a1a1aa' }}>请先登录</div>
      </main>
    );
  }

  if (loading) {
    return (
      <main style={{
        minHeight: "100vh",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        background: "#18181b"
      }}>
        <div style={{ color: '#a1a1aa' }}>{t('loading')}</div>
      </main>
    );
  }

  // 计算统计数据
  const totalClients = clients.length;
  
  // 获取当前月份（使用本地时区，与getTodayDate保持一致）
  const getCurrentMonth = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    return `${year}-${month}`;
  };
  
  const currentMonth = getCurrentMonth();
  
  // 本月活跃客户（本月有预约过课程并且扣课时的总人数）
  const monthlyActiveClients = new Set(
    schedules
      .filter(schedule => 
        schedule.date.startsWith(currentMonth) && 
        (schedule.status === 'completed' || schedule.status === 'cancelled_with_deduction')
      )
      .map(schedule => schedule.clientId)
  ).size;
  
  // 剩余客户配套数量
  const remainingPackages = packages.filter(pkg => !pkg.isExpired && pkg.remainingSessions > 0).length;
  
  const today = getTodayDate();
  
  // 今日课程数量（今日所有课程总数）- 兼容不同时区的日期格式
  const todaySchedules = schedules.filter(schedule => {
    // 直接比较日期字符串
    if (schedule.date === today) return true;
    
    // 如果直接比较失败，尝试解析日期进行比较
    try {
      const scheduleDate = new Date(schedule.date + 'T00:00:00');
      const todayDate = new Date(today + 'T00:00:00');
      return scheduleDate.getTime() === todayDate.getTime();
    } catch (error) {
      return false;
    }
  }).length;
  
  // 本月已完成课程（包括取消但扣课时的课程）
  const monthlyCompletedCourses = schedules.filter(schedule => 
    schedule.date.startsWith(currentMonth) && (schedule.status === 'completed' || schedule.status === 'cancelled_with_deduction')
  ).length;
  
  // 调试信息
  console.log('本月课程统计:', {
    totalSchedules: schedules.length,
    currentMonth,
    completedCourses: schedules.filter(s => s.date.startsWith(currentMonth) && s.status === 'completed').length,
    cancelledWithDeduction: schedules.filter(s => s.date.startsWith(currentMonth) && s.status === 'cancelled_with_deduction').length,
    monthlyCompletedCourses,
    monthlyActiveClients,
    activeClientIds: Array.from(new Set(
      schedules
        .filter(schedule => 
          schedule.date.startsWith(currentMonth) && 
          (schedule.status === 'completed' || schedule.status === 'cancelled_with_deduction')
        )
        .map(schedule => schedule.clientId)
    ))
  });
  
  // 检查所有课程的日期格式
  const todayCourses = schedules.filter(s => s.date === today);
  const allTodayCourses = schedules.filter(s => {
    const scheduleDate = new Date(s.date + 'T00:00:00');
    const todayDate = new Date(today + 'T00:00:00');
    return scheduleDate.getTime() === todayDate.getTime();
  });
  
  // 辅助函数：检查日期是否为今天
  const isToday = (dateStr: string) => {
    if (dateStr === today) return true;
    try {
      const scheduleDate = new Date(dateStr + 'T00:00:00');
      const todayDate = new Date(today + 'T00:00:00');
      return scheduleDate.getTime() === todayDate.getTime();
    } catch (error) {
      return false;
    }
  };
  
  console.log('今日课程统计:', {
    today,
    todayTotal: schedules.filter(s => isToday(s.date)).length,
    todayScheduled: schedules.filter(s => isToday(s.date) && s.status === 'scheduled').length,
    todayCompleted: schedules.filter(s => isToday(s.date) && s.status === 'completed').length,
    todayCancelledWithDeduction: schedules.filter(s => isToday(s.date) && s.status === 'cancelled_with_deduction').length,
    todayCancelled: schedules.filter(s => isToday(s.date) && s.status === 'cancelled').length,
    todaySchedules,
    allTodayCourses: allTodayCourses.length,
    allSchedulesDates: schedules.map(s => s.date).slice(0, 5) // 显示前5个课程的日期
  });
  
  // 本月新增配套数量 - 统计所有在本月创建的配套（不管新客户还是老客户）
  const monthlyNewPackages = packages.filter(pkg => {
    let isInCurrentMonth = false;
    let usedDate = '';
    
    // 优先使用createdAt字段
    if (pkg.createdAt) {
      const createdDate = pkg.createdAt.split('T')[0];
      isInCurrentMonth = createdDate.startsWith(currentMonth);
      usedDate = createdDate;
      console.log('配套使用createdAt:', pkg.id, '日期:', createdDate, '是否本月:', isInCurrentMonth);
    } else {
      // 如果没有createdAt，使用startDate作为备选
      isInCurrentMonth = pkg.startDate.startsWith(currentMonth);
      usedDate = pkg.startDate;
      console.log('配套使用startDate:', pkg.id, '日期:', pkg.startDate, '是否本月:', isInCurrentMonth);
    }
    
    if (isInCurrentMonth) {
      console.log('本月新增配套:', pkg.id, '使用日期:', usedDate, '客户ID:', pkg.clientId);
    }
    
    return isInCurrentMonth;
  }).length;
  
  console.log('本月新增配套统计:', {
    currentMonth,
    totalPackages: packages.length,
    monthlyNewPackages,
    packagesWithCreatedAt: packages.filter(p => p.createdAt).length,
    packagesWithoutCreatedAt: packages.filter(p => !p.createdAt).length,
    // 显示所有配套的详细信息
    allPackages: packages.map(p => ({
      id: p.id,
      clientId: p.clientId,
      coachId: p.coachId,
      startDate: p.startDate,
      createdAt: p.createdAt,
      createdDate: p.createdAt ? p.createdAt.split('T')[0] : null,
      isInCurrentMonth: p.createdAt ? 
        p.createdAt.split('T')[0].startsWith(currentMonth) : 
        p.startDate.startsWith(currentMonth)
    })),
    // 本月新增的配套详情（包括使用startDate的）
    monthlyNewPackagesDetails: packages.filter(pkg => {
      if (pkg.createdAt) {
        const createdDate = pkg.createdAt.split('T')[0];
        return createdDate.startsWith(currentMonth);
      }
      // 如果没有createdAt，使用startDate
      return pkg.startDate.startsWith(currentMonth);
    }).map(pkg => ({
      id: pkg.id,
      clientId: pkg.clientId,
      coachId: pkg.coachId,
      createdAt: pkg.createdAt?.split('T')[0],
      startDate: pkg.startDate,
      usedStartDate: !pkg.createdAt
    }))
  });

  // 处理表单输入
  const handleInputChange = (field: string, value: any) => {
    setEditForm(prev => ({ ...prev, [field]: value }));
  };

  // 处理数组字段（专长、证书、语言）
  const handleArrayChange = (field: string, value: string) => {
    const items = value.split(',').map(item => item.trim()).filter(item => item);
    setEditForm(prev => ({ ...prev, [field]: items }));
  };

  // 预设专长选项
  const specialtyOptions = [
    t('strengthTraining'),
    t('cardio'),
    t('yoga'),
    t('pilates'),
    t('functionalTraining'),
    t('rehabilitationTraining'),
    t('other')
  ];

  // 处理专长选择
  const handleSpecialtyChange = (specialty: string) => {
    if (specialty === '其他') {
      setShowCustomInput(true);
      return;
    }

    setEditForm(prev => {
      const currentSpecialties = prev.specialties;
      if (currentSpecialties.includes(specialty)) {
        // 如果已选中，则移除
        return { ...prev, specialties: currentSpecialties.filter(s => s !== specialty) };
      } else {
        // 如果未选中，则添加
        return { ...prev, specialties: [...currentSpecialties, specialty] };
      }
    });
  };

  // 添加自定义专长
  const handleAddCustomSpecialty = () => {
    if (customSpecialty.trim()) {
      setEditForm(prev => ({
        ...prev,
        specialties: [...prev.specialties, customSpecialty.trim()]
      }));
      setCustomSpecialty('');
      setShowCustomInput(false);
    }
  };

  // 移除专长
  const handleRemoveSpecialty = (specialtyToRemove: string) => {
    setEditForm(prev => ({
      ...prev,
      specialties: prev.specialties.filter(s => s !== specialtyToRemove)
    }));
  };

  // 保存教练信息
  const handleSave = async () => {
    if (!user || !coach) return;
    
    try {
      const updatedCoach = {
        ...coach,
        ...editForm,
        updatedAt: new Date().toISOString()
      };
      
      await updateDoc(doc(db, "coaches", user.uid), updatedCoach);
      setCoach(updatedCoach);
      setIsEditing(false);
    } catch (error) {
      console.error("保存失败:", error);
    }
  };

  // 处理照片上传
  const handleImageUpload = (url: string) => {
    setEditForm(prev => ({ ...prev, avatar: url }));
  };

  // 处理照片删除
  const handleImageRemove = () => {
    setEditForm(prev => ({ ...prev, avatar: '' }));
  };

  // 取消编辑
  const handleCancel = () => {
    if (coach) {
      setEditForm({
        displayName: coach.displayName || '',
        phone: coach.phone || '',
        bio: coach.bio || '',
        specialties: coach.specialties || [],
        experience: coach.experience || 0,
        certifications: coach.certifications || [],
        education: coach.education || '',
        location: coach.location || '',
        languages: coach.languages || [],
        isPublic: coach.isPublic || false,
        avatar: coach.avatar || ''
      });
    }
    setIsEditing(false);
  };

  return (
    <main className="page-content" style={{
      minHeight: "100vh",
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "flex-start",
      background: "#18181b",
              padding: isMobile ? "4px" : "16px", // 移动端减少padding
      paddingTop: isMobile ? 8 : 20, // 移动端减少顶部间距
      paddingBottom: isMobile ? 100 : 20 // 移动端增加底部间距
    }}>
        <div style={{ 
          marginBottom: isMobile ? 16 : 32, 
          textAlign: "center",
          width: "100%"
        }}>
          <h1 style={{ 
            fontSize: "36px",
            fontWeight: 700, 
            color: "#fff",
            marginBottom: isMobile ? 4 : 8
          }}>{t('profile')}</h1>
          <p style={{ 
            color: "#a1a1aa",
            fontSize: isMobile ? "clamp(12px, 3vw, 14px)" : "16px"
          }}>{t('profileDescription')}</p>
        </div>

        {/* 个人信息卡片 */}
        <div className="form-card" style={{ 
          maxWidth: 600, 
          width: '100%', 
          marginBottom: isMobile ? 16 : 24,
          padding: isMobile ? "12px" : "20px" // 移动端减少内边距
        }}>
          <div style={{ 
            display: "flex", 
            justifyContent: "space-between", 
            alignItems: "center", 
            marginBottom: isMobile ? 12 : 16,
            flexWrap: isMobile ? "wrap" : "nowrap", // 移动端允许换行
            gap: isMobile ? 8 : 0 // 移动端添加间距
          }}>
            <h2 style={{ 
              color: "#fff", 
              fontSize: isMobile ? "clamp(16px, 3vw, 20px)" : "24px", 
              fontWeight: 600,
              margin: 0
            }}>{t('personalInfo')}</h2>
            {!isEditing && (
              <button
                onClick={() => setIsEditing(true)}
                style={{
                  background: '#60a5fa',
                  color: '#18181b',
                  border: 'none',
                  borderRadius: 6,
                  padding: isMobile ? '4px 8px' : '6px 12px', // 移动端减少内边距
                  cursor: 'pointer',
                  fontSize: isMobile ? "clamp(12px, 2.5vw, 14px)" : "14px", // 移动端响应式字体
                  fontWeight: 600,
                  minWidth: 'auto',
                  width: 'auto'
                }}
              >
                {t('edit')}
              </button>
            )}
          </div>
          
          {!isEditing ? (
            // 显示模式
            <>
              <div style={{ display: "flex", alignItems: "center", gap: 16, marginBottom: 16 }}>
                {coach?.avatar ? (
                  <img
                    src={coach.avatar}
                    alt="教练头像"
                    style={{
                      width: 60,
                      height: 60,
                      borderRadius: "50%",
                      objectFit: "cover"
                    }}
                  />
                ) : (
                  <div style={{
                    width: 60,
                    height: 60,
                    borderRadius: "50%",
                    background: "#60a5fa",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    fontSize: 24,
                    fontWeight: 600,
                    color: "#18181b"
                  }}>
                    {(coach?.displayName || user.email)?.charAt(0).toUpperCase()}
                  </div>
                )}
                <div>
                  <h3 style={{ color: "#fff", fontSize: 18, fontWeight: 600, marginBottom: 4 }}>
                    {coach?.displayName || user.email}
                  </h3>
                  <p style={{ color: "#a1a1aa", fontSize: 14 }}>
                    {coach?.experience ? `${coach.experience}${t('yearsExperience')}` : t('coachAccount')}
                  </p>
                  {coach?.displayName && (
                    <p style={{ color: "#71717a", fontSize: 12, marginTop: 2 }}>
                      {user.email}
                    </p>
                  )}
                </div>
              </div>
              
              {coach && (
                <div style={{ marginBottom: 16 }}>
                  {coach.bio && (
                    <p style={{ color: "#a1a1aa", marginBottom: 8 }}>{coach.bio}</p>
                  )}
                                     {coach.specialties.length > 0 && (
                     <div style={{ marginBottom: 8 }}>
                       <span style={{ color: "#60a5fa", fontSize: 14, fontWeight: 600 }}>{t('specialties')}：</span>
                       <span style={{ color: "#a1a1aa", fontSize: 14 }}>
                         {coach.specialties.join(', ')}
                       </span>
                     </div>
                   )}
                   {coach.location && (
                     <div style={{ marginBottom: 8 }}>
                       <span style={{ color: "#60a5fa", fontSize: 14, fontWeight: 600 }}>{t('location')}：</span>
                       <span style={{ color: "#a1a1aa", fontSize: 14 }}>{coach.location}</span>
                     </div>
                   )}
                   {coach.isPublic && (
                     <div style={{ 
                       background: "#059669", 
                       color: "#fff", 
                       padding: "4px 8px", 
                       borderRadius: 4, 
                       fontSize: 12,
                       display: "inline-block"
                     }}>
                       {t('publicProfile')}
                     </div>
                   )}
                </div>
              )}
            </>
          ) : (
            // 编辑模式
            <div style={{ marginBottom: 16 }}>
              <div style={{ marginBottom: 16 }}>
                <label style={{ display: 'block', marginBottom: 8, color: '#a1a1aa', fontSize: 14 }}>
                  {t('uploadPhoto')}
                </label>
                <ImageUpload
                  currentImageUrl={editForm.avatar}
                  onImageUpload={handleImageUpload}
                  onImageRemove={handleImageRemove}
                />
              </div>
              
              <div style={{ marginBottom: 12 }}>
                <label style={{ display: 'block', marginBottom: 4, color: '#a1a1aa', fontSize: 14 }}>
                  {t('displayName')} *
                </label>
                <input
                  type="text"
                  value={editForm.displayName}
                  onChange={(e) => handleInputChange('displayName', e.target.value)}
                  placeholder={t('displayName')}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #333',
                    borderRadius: 6,
                    background: '#18181b',
                    color: '#fff',
                    fontSize: 14
                  }}
                />
              </div>
              
              <div style={{ marginBottom: 12 }}>
                <label style={{ display: 'block', marginBottom: 4, color: '#a1a1aa', fontSize: 14 }}>
                  {t('bio')}
                </label>
                <textarea
                  value={editForm.bio}
                  onChange={(e) => handleInputChange('bio', e.target.value)}
                  placeholder={t('bioPlaceholder')}
                  rows={3}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #333',
                    borderRadius: 6,
                    background: '#18181b',
                    color: '#fff',
                    fontSize: 14,
                    resize: 'vertical'
                  }}
                />
              </div>
              
              <div style={{ marginBottom: 12 }}>
                <label style={{ display: 'block', marginBottom: 4, color: '#a1a1aa', fontSize: 14 }}>
                  {t('specialties')}
                </label>
                
                {/* 预设选项 */}
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: 6, marginBottom: 8 }}>
                  {specialtyOptions.map((option) => (
                    <button
                      key={option}
                      type="button"
                      onClick={() => handleSpecialtyChange(option)}
                      style={{
                        padding: '4px 8px',
                        border: editForm.specialties.includes(option) ? '1px solid #60a5fa' : '1px solid #333',
                        borderRadius: 12,
                        background: editForm.specialties.includes(option) ? '#60a5fa' : 'transparent',
                        color: editForm.specialties.includes(option) ? '#18181b' : '#a1a1aa',
                        cursor: 'pointer',
                        fontSize: 12,
                        fontWeight: editForm.specialties.includes(option) ? 600 : 400,
                        width: 'auto',
                        minWidth: 'unset'
                      }}
                    >
                      {option}
                    </button>
                  ))}
                </div>

                {/* 自定义输入 */}
                {showCustomInput && (
                  <div style={{ display: 'flex', gap: 6, marginBottom: 8, alignItems: 'center' }}>
                    <input
                      type="text"
                      value={customSpecialty}
                      onChange={(e) => setCustomSpecialty(e.target.value)}
                      placeholder={t('specialtiesPlaceholder')}
                      style={{
                        flex: 1,
                        padding: '8px 12px',
                        border: '1px solid #333',
                        borderRadius: 6,
                        background: '#18181b',
                        color: '#fff',
                        fontSize: 14
                      }}
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          handleAddCustomSpecialty();
                        }
                      }}
                    />
                    <button
                      onClick={handleAddCustomSpecialty}
                      style={{
                        padding: '6px 8px',
                        background: '#60a5fa',
                        color: '#18181b',
                        border: 'none',
                        borderRadius: 4,
                        cursor: 'pointer',
                        fontSize: 12,
                        fontWeight: 600,
                        width: 'auto',
                        minWidth: 'unset'
                      }}
                    >
                      {t('add')}
                    </button>
                    <button
                      onClick={() => {
                        setShowCustomInput(false);
                        setCustomSpecialty('');
                      }}
                      style={{
                        padding: '6px 8px',
                        background: '#23232a',
                        color: '#a1a1aa',
                        border: '1px solid #333',
                        borderRadius: 4,
                        cursor: 'pointer',
                        fontSize: 12,
                        width: 'auto',
                        minWidth: 'unset'
                      }}
                    >
                      {t('cancel')}
                    </button>
                  </div>
                )}

                {/* 已选择的专长 */}
                {editForm.specialties.length > 0 && (
                  <div style={{ marginTop: 8 }}>
                    <p style={{ color: '#a1a1aa', fontSize: 12, marginBottom: 4 }}>{t('selected')}：</p>
                    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 4 }}>
                      {editForm.specialties.map((specialty) => (
                        <div
                          key={specialty}
                          style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: 4,
                            padding: '4px 8px',
                            background: '#23232a',
                            border: '1px solid #333',
                            borderRadius: 12,
                            fontSize: 12
                          }}
                        >
                          <span style={{ color: '#fff' }}>{specialty}</span>
                          <button
                            onClick={() => handleRemoveSpecialty(specialty)}
                            style={{
                              background: 'none',
                              border: 'none',
                              color: '#dc2626',
                              cursor: 'pointer',
                              fontSize: 12,
                              padding: 0,
                              width: 16,
                              height: 16,
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center'
                            }}
                          >
                            ×
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
              
              <div style={{ marginBottom: 12 }}>
                <label style={{ display: 'block', marginBottom: 4, color: '#a1a1aa', fontSize: 14 }}>
                  {t('experience')}
                </label>
                <input
                  type="number"
                  value={editForm.experience}
                  onChange={(e) => handleInputChange('experience', parseInt(e.target.value) || 0)}
                  min="0"
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #333',
                    borderRadius: 6,
                    background: '#18181b',
                    color: '#fff',
                    fontSize: 14
                  }}
                />
              </div>
              
              <div style={{ marginBottom: 12 }}>
                <label style={{ display: 'block', marginBottom: 4, color: '#a1a1aa', fontSize: 14 }}>
                  {t('certifications')}（用逗号分隔）
                </label>
                <input
                  type="text"
                  value={editForm.certifications.join(', ')}
                  onChange={(e) => handleArrayChange('certifications', e.target.value)}
                  placeholder={t('certificationsPlaceholder')}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #333',
                    borderRadius: 6,
                    background: '#18181b',
                    color: '#fff',
                    fontSize: 14
                  }}
                />
              </div>
              
              <div style={{ marginBottom: 12 }}>
                <label style={{ display: 'block', marginBottom: 4, color: '#a1a1aa', fontSize: 14 }}>
                  {t('location')}
                </label>
                <input
                  type="text"
                  value={editForm.location}
                  onChange={(e) => handleInputChange('location', e.target.value)}
                  placeholder={t('locationPlaceholder')}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #333',
                    borderRadius: 6,
                    background: '#18181b',
                    color: '#fff',
                    fontSize: 14
                  }}
                />
              </div>
              
              <div style={{ marginBottom: 12 }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: 8, color: '#a1a1aa', fontSize: 14 }}>
                  <input
                    type="checkbox"
                    checked={editForm.isPublic}
                    onChange={(e) => handleInputChange('isPublic', e.target.checked)}
                    style={{ margin: 0, width: 16, height: 16 }}
                  />
                  <span>{t('isPublic')}</span>
                </label>
              </div>
              
              <div style={{ display: "flex", gap: 8 }}>
                <button
                  onClick={handleSave}
                  style={{
                    background: '#60a5fa',
                    color: '#18181b',
                    border: 'none',
                    borderRadius: 6,
                    padding: '8px 16px',
                    cursor: 'pointer',
                    fontSize: 14,
                    fontWeight: 600
                  }}
                >
                  {t('save')}
                </button>
                <button
                  onClick={handleCancel}
                  style={{
                    background: '#23232a',
                    color: '#a1a1aa',
                    border: '1px solid #333',
                    borderRadius: 6,
                    padding: '8px 16px',
                    cursor: 'pointer',
                    fontSize: 14
                  }}
                >
                  {t('cancel')}
                </button>
              </div>
            </div>
          )}
          

        </div>






      </main>
  );
} 